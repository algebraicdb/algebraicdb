use crate::ast::*;
use std::str::FromStr;
use crate::pattern::Pattern;
use crate::types::Value;

grammar;

// List of all terminals, and their precedence
// Terminals within the same block have the same precedence except that regexes have lower.
// Terminals in else-blocks have lower precedence than the blocks before.
match {
    "SELECT" => SELECT,
    "FROM" => FROM,
    "WHERE" => WHERE,
    "INSERT" => INSERT,
    "INTO" => INTO,
    "VALUES" => VALUES,
    "DELETE" => DELETE,
    "DROP" => DROP,
    "UPDATE" => UPDATE,
    "JOIN" => JOIN,
    "LEFT" => LEFT,
    "RIGHT" => RIGHT,
    "INNER" => INNER,
    "OUTER" => OUTER,
    "FULL" => FULL,
    "SET" => SET,
    "ON" => ON,
    "AND" => AND,
    "OR" => OR,
    "CREATE" => CREATE,
    "TABLE" => TABLE,
    "TYPE" => TYPE,
    "AS" => AS,
    "VARIANT" => VARIANT,
    "\"" => QUOTE,
    "_",
    ",",
    ")",
    "(",
    "{",
    "}",
    "=",
    "!=",
    "<=",
    ">=",
    "<",
    ">",
    ";",
    "::",
    ":",
    "true",
    "false",
    r"-?[0-9]+" => INTEGER,
    // TODO: make sure this regex for floats conform to standards
    r"-?[0-9]+(\.[0-9]+)([eE]-?[0-9]+)?" => FLOAT,
    r"[A-z][A-z0-9_]*" => IDENT,
    r#""[^"]*""# => STR,
    r#"'.'"# => CHAR,
}

// Main production
pub Stmt: Stmt = {
    <Select> ";" => Stmt::Select(<>),
    <Insert> ";" => Stmt::Insert(<>),
    <Delete> ";" => Stmt::Delete(<>),
    <CreateTable> ";" => Stmt::CreateTable(<>),
    <Update> ";" => Stmt::Update(<>),
    <CreateType> ";" => Stmt::CreateType(<>),
    <Drop> ";" => Stmt::Drop(<>),
}

Delete: Delete = {
    DELETE FROM <table:Ident> <where_clause:(WhereClause?)> => Delete {
        table,
        where_clause,
    },
}

Drop: Drop = {
    DROP TABLE
    <table:Ident> => Drop {
        table,
        // TODO drop_clause postgres uses cascade / restrict etc, restrict by default
    },
}

Update: Update = {
    UPDATE
    <table:Ident> SET
    <ass:Comma<Ass>>
    <where_clause:(WhereClause?)>
    => Update {
        table,
        ass,
        where_clause,
    },
}

Select: Select = {
    SELECT
        <items:Comma<Expr>>
        <from:(FROM <SelectFrom>)?>
        <where_clause:WhereClause?>
    => Select {
        items,
        from: from,
        where_clause,
    },
}

SelectFrom: SelectFrom = {
    <table_a:SelectFrom>
        <join_type:JoinType>
        <table_b:SelectFrom2>
        <on_clause:(ON <Expr>)?>
    => SelectFrom::Join(box Join {
        table_a,
        table_b,
        join_type,
        on_clause,
    }),
    SelectFrom2,
}

SelectFrom2: SelectFrom = {
    "(" <Select> ")" => SelectFrom::Select(box <>),
    Ident => SelectFrom::Table(<>),
    "(" <SelectFrom> ")",
}

WhereClause: WhereClause = {
    WHERE <Comma<WhereItem>> => WhereClause{
        items: <>,
    },
}

WhereItem: WhereItem = {
    <col:Ident> ":" <pattern:Pattern> => (WhereItem::Pattern(col, pattern)),
    Expr => WhereItem::Expr(<>),
}

CreateTable: CreateTable = {
    CREATE TABLE <table:Ident>
        <columns:("(" <Comma<(Ident Ident)>> ")")>
    => CreateTable {
        table,
        columns,
    }
}

Insert: Insert = {
    INSERT INTO <table:Ident>
        <columns:("(" <Comma<Ident>> ")")?>
        <rows:InsertRows?>
    => Insert {
        table,
        columns: columns.unwrap_or(vec![]),
        rows: rows.unwrap_or(vec![]),
    }
}

InsertRows: Vec<Vec<Expr>> = {
    VALUES <Comma<("(" <Comma<Expr>> ")")>>,
}

JoinType: JoinType = {
    LEFT OUTER? JOIN => JoinType::LeftOuter,
    RIGHT OUTER? JOIN => JoinType::RightOuter,
    FULL OUTER? JOIN => JoinType::FullOuter,
    INNER? JOIN => JoinType::Inner,
}

VarDef: (String, Vec<String>) = {
    <name:Ident> "(" <variants:Comma<Ident>> ")"
        => (name, variants),
}

CreateType: CreateType = {
    CREATE TYPE
        <name:Ident>
        AS VARIANT
        "{" <variants:Comma<VarDef>> "}"
        => CreateType::Variant(name, variants),
}

Namespace: String = {
    <Ident> "::" => <>.to_string(),
}

Value: Value = {
    Char => Value::Char(<>),
    Integer => Value::Integer(<>),
    Double => Value::Double(<>),
    Bool => Value::Bool(<>),
    Str => unimplemented!("Strings aren't supported"),
    // TODO: This grammar will probably conflict with function calls...
    <namespace:Namespace?>
        <variant:Ident> "("
        <values:Comma<Value>> ")"
    => Value::Sum(
        namespace,
        variant.to_string(),
        values,
    ),
}

Expr3: Expr = {
    Ident => Expr::Ident(<>),
    Value => Expr::Value(<>),
    "(" <Expr> ")",
}

Expr2: Expr = {
    <e1:Expr2> "="  <e2:Expr3> => Expr::Equals(box e1, box e2),
    <e1:Expr2> "!=" <e2:Expr3> => Expr::NotEquals(box e1, box e2),
    <e1:Expr2> "<=" <e2:Expr3> => Expr::LessEquals(box e1, box e2),
    <e1:Expr2> ">=" <e2:Expr3> => Expr::GreaterEquals(box e1, box e2),
    <e1:Expr2> "<"  <e2:Expr3> => Expr::LessThan(box e1, box e2),
    <e1:Expr2> ">"  <e2:Expr3> => Expr::GreaterThan(box e1, box e2),
    Expr3,
}

Expr1: Expr = {
    <e1:Expr1> AND <e2:Expr2> => Expr::And(box e1, box e2),
    Expr2
}

Expr: Expr = {
    <e1:Expr> OR <e2:Expr1> => Expr::Or(box e1, box e2),
    Expr1,
}

Ass: Ass = {
    <col:Ident> "=" <expr:Expr> => Ass {
        col,
        expr,
    }
}

pub Pattern: Pattern = {
    "_" => Pattern::Ignore,
    Char => Pattern::Char(<>),
    Integer => Pattern::Int(<>),
    Bool => Pattern::Bool(<>),
    Double => Pattern::Double(<>),
    Ident => Pattern::Binding(<>),
    <namespace:Namespace?>
        <name:Ident>
        "(" <sub_patterns:Comma<Pattern>> ")"
    => Pattern::Variant {
        namespace,
        name,
        sub_patterns
    },
}

Ident: String = {
    IDENT => String::from(<>),
}

Str: String = {
    STR => String::from(<>.strip_prefix('"').unwrap().strip_suffix('"').unwrap()),
}

Char: char = {
    CHAR => <>.chars().nth(1).unwrap(),
}

Integer: i32 = {
    INTEGER => i32::from_str(<>).unwrap()
};

Double: f64 = {
    FLOAT => f64::from_str(<>).unwrap()
}

Bool: bool = {
    "true" => true,
    "false" => false,
};

// Generic helper-rule for comma-separated lists
Comma<E>: Vec<E> =
    <v0:(<E> ",")*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();

