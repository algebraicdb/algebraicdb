use crate::ast::*;
use std::str::FromStr;
use crate::types::Value;

grammar;

// List of all terminals, and their precedence
// Terminals within the same block have the same precedence except that regexes have lower.
// Terminals in else-blocks have lower precedence than the blocks before.
match {
    "SELECT" => SELECT,
    "FROM" => FROM,
    "WHERE" => WHERE,
    "INSERT" => INSERT,
    "INTO" => INTO,
    "VALUES" => VALUES,
    "DELETE" => DELETE,
    "DROP" => DROP,
    "UPDATE" => UPDATE,
    "JOIN" => JOIN,
    "LEFT" => LEFT,
    "RIGHT" => RIGHT,
    "INNER" => INNER,
    "OUTER" => OUTER,
    "FULL" => FULL,
    "SET" => SET,
    "ON" => ON,
    "AND" => AND,
    "OR" => OR,
    "CREATE" => CREATE,
    "TABLE" => TABLE,
    "TYPE" => TYPE,
    "AS" => AS,
    "VARIANT" => VARIANT,
    "\"" => QUOTE,
    "_",
    ",",
    ")",
    "(",
    "{",
    "}",
    "=",
    "!=",
    "<=",
    ">=",
    "<",
    ">",
    ";",
    "::",
    ":",
    "true",
    "false",
    r"-?[0-9]+" => INTEGER,
    // TODO: make sure this regex for floats conform to standards
    r"-?[0-9]+(\.[0-9]+)([eE]-?[0-9]+)?" => FLOAT,
    r"[A-z][A-z0-9_]*" => IDENT,
    r#""[^"]*""# => STR,
    r#"'.'"# => CHAR,
    r"\s*" => { },
    r"--[^\n\r]*[\n\r]*" => {}, // `-- comment`
}

// Main production
pub Stmt: Stmt<'input> = {
    <Select> ";" => Stmt::Select(<>),
    <Insert> ";" => Stmt::Insert(<>),
    <Delete> ";" => Stmt::Delete(<>),
    <CreateTable> ";" => Stmt::CreateTable(<>),
    <Update> ";" => Stmt::Update(<>),
    <CreateType> ";" => Stmt::CreateType(<>),
    <Drop> ";" => Stmt::Drop(<>),
}

Delete: Delete<'input> = {
    DELETE FROM <table:Ident> <where_clause:(WhereClause?)> => Delete {
        table,
        where_clause,
    },
}

Drop: Drop<'input> = {
    DROP TABLE
    <table:Ident> => Drop {
        table,
        // TODO drop_clause postgres uses cascade / restrict etc, restrict by default
    },
}

Update: Update<'input> = {
    UPDATE
    <table:Ident> SET
    <ass:Comma<Ass>>
    <where_clause:(WhereClause?)>
    => Update {
        table,
        ass,
        where_clause,
    },
}

Select: Select<'input> = {
    SELECT
        <items:Comma<Expr>>
        <from:(FROM <SelectFrom>)?>
        <where_clause:WhereClause?>
    => Select {
        items,
        from: from,
        where_clause,
    },
}

SelectFrom: SelectFrom<'input> = {
    <table_a:SelectFrom>
        <join_type:JoinType>
        <table_b:SelectFrom2>
        <on_clause:(ON <Expr>)?>
    => SelectFrom::Join(box Join {
        table_a,
        table_b,
        join_type,
        on_clause,
    }),
    SelectFrom2,
}

SelectFrom2: SelectFrom<'input> = {
    "(" <Select> ")" => SelectFrom::Select(box <>),
    Ident => SelectFrom::Table(<>),
    "(" <SelectFrom> ")",
}

WhereClause: WhereClause<'input> = {
    WHERE <Comma<WhereItem>> => WhereClause{
        items: <>,
    },
}

WhereItem: WhereItem<'input> = {
    <col:Spanned<Ident>> ":" <pattern:Spanned<Pattern>> => (WhereItem::Pattern(col, pattern)),
    Expr => WhereItem::Expr(<>),
}

CreateTable: CreateTable<'input> = {
    CREATE TABLE <table:Ident>
        <columns:("(" <Comma<(Spanned<Ident> Spanned<Ident>)>> ")")>
    => CreateTable {
        table,
        columns,
    }
}

Insert: Insert<'input> = {
    INSERT INTO <table:Ident>
        <columns:("(" <Spanned<Comma<Spanned<Ident>>>> ")")?>
        <from:InsertFrom>

    => Insert {
        table,
        columns: columns.unwrap_or(vec![].into()),
        from,
    }
}

InsertFrom: InsertFrom<'input> = {
    VALUES <Comma<Spanned<("(" <Comma<Expr>> ")")>>> => InsertFrom::Values(<>),
    Spanned<Select> => InsertFrom::Select(<>)
}

JoinType: JoinType = {
    LEFT OUTER? JOIN => JoinType::LeftOuter,
    RIGHT OUTER? JOIN => JoinType::RightOuter,
    FULL OUTER? JOIN => JoinType::FullOuter,
    INNER? JOIN => JoinType::Inner,
}

VarDef: (Spanned<&'input str>, Vec<Spanned<&'input str>>) = {
    <name:Spanned<Ident>> "(" <variants:Comma<Spanned<Ident>>> ")"
        => (name, variants),
}

CreateType: CreateType<'input> = {
    CREATE TYPE
        <name:Spanned<Ident>>
        AS VARIANT
        "{" <variants:Comma<VarDef>> "}"
        => CreateType::Variant {
            name, variants
        },
}

Namespace: Spanned<&'input str> = {
    <Spanned<Ident>> "::",
}

Value: Value<'input> = {
    Char => Value::Char(<>),
    Integer => Value::Integer(<>),
    Double => Value::Double(<>),
    Bool => Value::Bool(<>),
    Str => unimplemented!("Strings aren't supported"),
    // TODO: This grammar will probably conflict with function calls...
    <namespace:Namespace?>
        <variant:Ident> "("
        <values:Comma<Value>> ")"
    => Value::Sum(
        namespace.map(|s| s.value.into()),
        variant.into(),
        values,
    ),
}

Expr3: Expr<'input> = {
    Spanned<Ident> => Expr::Ident(<>),
    Spanned<Value> => Expr::Value(<>),
    "(" <Expr0> ")",
}

Expr2: Expr<'input> = {
    <e1:Spanned<Expr2>> "="  <e2:Spanned<Expr3>> => Expr::Eql(box (e1, e2)),
    <e1:Spanned<Expr2>> "!=" <e2:Spanned<Expr3>> => Expr::NEq(box (e1, e2)),
    <e1:Spanned<Expr2>> "<=" <e2:Spanned<Expr3>> => Expr::LEq(box (e1, e2)),
    <e1:Spanned<Expr2>> ">=" <e2:Spanned<Expr3>> => Expr::GEq(box (e1, e2)),
    <e1:Spanned<Expr2>> "<"  <e2:Spanned<Expr3>> => Expr::LTh(box (e1, e2)),
    <e1:Spanned<Expr2>> ">"  <e2:Spanned<Expr3>> => Expr::GTh(box (e1, e2)),
    Expr3,
}

Expr1: Expr<'input> = {
    <e1:Spanned<Expr1>> AND <e2:Spanned<Expr2>> => Expr::And(box (e1, e2)),
    Expr2
}

Expr0: Expr<'input> = {
    <e1:Spanned<Expr0>> OR <e2:Spanned<Expr1>> => Expr::Or(box (e1, e2)),
    Expr1,

}

Expr: Spanned<Expr<'input>> = <Spanned<Expr0>>;

Ass: Ass<'input> = {
    <col:Spanned<Ident>> "=" <expr:Expr> => Ass {
        col,
        expr,
    }
}

pub Pattern: Pattern<'input> = {
    "_" => Pattern::Ignore,
    Char => Pattern::Char(<>),
    Integer => Pattern::Int(<>),
    Bool => Pattern::Bool(<>),
    Double => Pattern::Double(<>),
    Ident => Pattern::Binding(<>),
    <namespace:Namespace?>
        <name:Spanned<Ident>>
        "(" <sub_patterns:Comma<Spanned<Pattern>>> ")"
    => Pattern::Variant {
        namespace,
        name,
        sub_patterns
    },
}

Ident: &'input str = {
    //IDENT => String::from(<>),
    IDENT,
}

Str: &'input str = {
    //STR => String::from(<>.strip_prefix('"').unwrap().strip_suffix('"').unwrap()),
    STR => <>.strip_prefix('"').unwrap().strip_suffix('"').unwrap(),
}

Char: char = {
    CHAR => <>.chars().nth(1).unwrap(),
}

Integer: i32 = {
    INTEGER => i32::from_str(<>).unwrap()
};

Double: f64 = {
    FLOAT => f64::from_str(<>).unwrap()
}

Bool: bool = {
    "true" => true,
    "false" => false,
};

Spanned<T>: Spanned<T> = {
    <l:@L> <t:T> <r:@R> => Spanned::new(l, r, t),
}

// Generic helper-rule for comma-separated lists
Comma<E>: Vec<E> =
    <v0:(<E> ",")*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();

